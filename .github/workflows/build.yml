name: Build

on:
  repository_dispatch:
    types: [build-trigger]

jobs:
  build:
    strategy:
      matrix:
        os: ["focal", "groovy"]
    runs-on: ubuntu-20.04
    steps:
      - name: Get tag version
        id: get_version
        run: |
          GITHUB_REF=${{ github.event.client_payload.ref }}
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      - name: Set artifact file name
        id: file_name
        run: |
          echo ::set-output name=ARTIFACT_FILE_NAME::semantic-release-test_v${{ steps.get_version.outputs.VERSION }}_${{ matrix.os }}.tar.gz
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: ${{ github.event.client_payload.ref }}
      - name: Create tar.gz
        run: |
          echo "${{ steps.get_version.outputs.VERSION }}"
          echo "${{ steps.file_name.outputs.ARTIFACT_FILE_NAME }}"
          echo "${{ github.event.client_payload.release.upload_url }}"

          touch "${{ steps.file_name.outputs.ARTIFACT_FILE_NAME }}"
          tar --exclude="${{ steps.file_name.outputs.ARTIFACT_FILE_NAME }}" --exclude='.[^/]*' -czf "${{ steps.file_name.outputs.ARTIFACT_FILE_NAME }}" .
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: semantic-release-test_${{ matrix.os }}
          path: ${{ steps.file_name.outputs.ARTIFACT_FILE_NAME }}
          retention-days: 1
  upload-release-assets:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Get tag version
        id: get_version
        run: |
          GITHUB_REF=${{ github.event.client_payload.ref }}
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      - uses: actions/download-artifact@v2
      - name: Display structure of downloaded files
        run: ls -R
      - name: Gather assets
        run: |
          mv semantic-release-test*/*.tar.gz .
      - name: Upload Multiple Release Assets
        uses: NBTX/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ github.event.client_payload.release.upload_url }}
          targets: "*.tar.gz"
